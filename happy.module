<?php

/**
 * @file
 * The main file of the module.
 */

// Include files utilities.
module_load_include('inc', 'happy_user');
module_load_include('inc', 'happy_role');
module_load_include('inc', 'happy_taxonomy');
module_load_include('inc', 'happy_node');


// Common debug function
define('DBUG_EXPORT', 'var_export');
define('DBUG_DUMP', 'var_dump');
define('DBUG_PRINT', 'print_r');
define('DBUG_WATCHDOG', 'watchdog');
define('DBUG_KEYS', 'array_keys');
define('DBUG_BACKTRACE', 'debug_backtrace');
define('DBUG_P_BACKTRACE', 'debug_print_backtrace');

// The Default debugging function, feel free to pickup your favorite one!
define('DBUG_DEFAULT', DBUG_PRINT);

/**
* Custom debug function : Usual and classic debugging function.
*
* @param mixed $obj Variable to debug
* @param bool $end Set to TRUE to terminate function
* @param string $method Debug method
* - DBUG_DEFAULT : Default debugging function
* - DBUG_EXPORT : var_export
* - DBUG_DUMP : var_dump
* - DBUG_PRINT : print_r
* - DBUG_WATCHDOG : watchdog
* - DBUG_KEYS : array_keys
*
* @TODO Improve Documentation
*
*/
function dbug($obj = NULL, $end = TRUE, $method = DBUG_DEFAULT) {

  // Watchdog method : no die().
  if ($method == DBUG_WATCHDOG) {
    $method ('dbug_custom', serialize ($obj));
  }
  else {

    // Output.
    print ('<pre>');
    if ($method == DBUG_KEYS) {
      // Ouput with array_keys method.
      print_r ($method ((array) $obj));
    }
    else {
      // Ouput with the giving method.
      $method ($obj);
    }
    print ('</pre>');

    // Die... not Today !
    if ($end || is_null ($end)) {
      drupal_exit();;
    }
  }
}

/**
* An extra debug function to show backtrace informations
*
* @param string $method
* - DBUG_BACKTRACE : debug_backtrace
* - DBUG_P_BACKTRACE : debug_print_backtrace
* Don't hesitated to try function why DBUG_P_BACKTRACE parameter
*
* @TODO Improve Documentation
*
*/
function dback ($method = DBUG_BACKTRACE) {

  // Output.
  print ('<pre>');
  print_r ($method(DEBUG_BACKTRACE_IGNORE_ARGS));
  print ('</pre>');

  // Exit.
  drupal_exit();
}


/**
 * Implements hook_preprocess_HOOK().
 */

function happy_preprocess(&$variables, $hook) {

  /**
   * Force theme_debug to true to see suggestions and template loaded,
   * Just add ?debug=1 at the end of your url and watch comments in the HTML rendered.
   * Watch _theme_render_template_debug function for more infos.
   * https://api.drupal.org/api/drupal/includes!theme.inc/function/_theme_render_template_debug/7
   */
  if(isset($_GET['debug']) && $_GET['debug'] === '1') {
    global $conf;
    $conf['theme_debug'] = TRUE;
  }

}

/**
 * @param null $var
 *
 * Same as drupal_json_output but to manage XML.
 */
function drupal_xml_output($var = NULL) {
  // We are returning XML, so tell the browser.
  drupal_add_http_header('Content-Type', 'application/xml');

  if (isset($var)) {
    echo drupal_xml_encode($var);
  }
}

/**
 * @param      $mixed
 * @param null $domElement
 * @param null $DOMDocument
 *
 * Original function from https://www.darklaunch.com/2009/05/23/php-xml-encode-using-domdocument-convert-array-to-xml-json-encode
 * Same as drupal_json_output but to manage XML.
 */
function drupal_xml_encode($mixed, $domElement = NULL, $DOMDocument = NULL) {
  if (is_null($DOMDocument)) {
    $DOMDocument = new DOMDocument;
    $DOMDocument->formatOutput = TRUE;
    drupal_xml_encode($mixed, $DOMDocument, $DOMDocument);
    echo $DOMDocument->saveXML();
  }
  else {
    if (is_array($mixed)) {
      foreach ($mixed as $index => $mixedElement) {
        if (is_int($index)) {
          if ($index === 0) {
            $node = $domElement;
          }
          else {
            $node = $DOMDocument->createElement($domElement->tagName);
            $domElement->parentNode->appendChild($node);
          }
        }
        else {
          $plural = $DOMDocument->createElement($index);
          $domElement->appendChild($plural);
          $node = $plural;
          if (!(rtrim($index, 's') === $index)) {
            $singular = $DOMDocument->createElement(rtrim($index, 's'));
            $plural->appendChild($singular);
            $node = $singular;
          }
        }

        drupal_xml_encode($mixedElement, $node, $DOMDocument);
      }
    }
    else {
      $domElement->appendChild($DOMDocument->createTextNode($mixed));
    }
  }
}